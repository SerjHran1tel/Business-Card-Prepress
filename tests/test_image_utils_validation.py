# tests/test_image_utils_validation.py
import unittest
import sys
import os
import tempfile
from PIL import Image

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from image_utils import validate_image_pairs_extended, generate_validation_report, ValidationResult


class TestImageUtilsValidation(unittest.TestCase):

    def setUp(self):
        self.temp_dir = tempfile.mkdtemp()

    def create_test_image_info(self, size=(100, 100), dpi=(300, 300)):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        return {
            'filename': 'test.jpg',
            'size': size,
            'dpi': dpi,
            'mode': 'RGB',
            'color_space': 'RGB',
            'color_profile': 'None'
        }

    def test_validate_pairs_extended_1to1(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã 1:1"""
        front_infos = [self.create_test_image_info() for _ in range(3)]
        back_infos = [self.create_test_image_info() for _ in range(3)]

        result = validate_image_pairs_extended(
            front_infos, back_infos, '1:1', False,
            card_width=90, card_height=50, bleed=3
        )

        self.assertIsInstance(result, ValidationResult)
        self.assertEqual(len(result.errors), 0)

    def test_validate_pairs_extended_mismatch(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        front_infos = [self.create_test_image_info() for _ in range(3)]
        back_infos = [self.create_test_image_info() for _ in range(2)]  # —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        result = validate_image_pairs_extended(
            front_infos, back_infos, '1:1', False,
            card_width=90, card_height=50, bleed=3
        )

        self.assertGreater(len(result.warnings), 0)

    def test_validate_pairs_extended_low_dpi(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–∏–∑–∫–∏–º DPI"""
        front_info = self.create_test_image_info(dpi=(72, 72))  # –Ω–∏–∑–∫–∏–π DPI

        result = validate_image_pairs_extended(
            [front_info], [], '1:1', False,
            card_width=90, card_height=50, bleed=3, min_dpi=300
        )

        self.assertGreater(len(result.dpi_issues), 0)

    def test_validate_pairs_extended_safe_zone(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã"""
        # –ú–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–æ–π –≤–∏–∑–∏—Ç–∫–∏
        front_info = self.create_test_image_info(size=(50, 25))

        result = validate_image_pairs_extended(
            [front_info], [], '1:1', False,
            card_width=90, card_height=50, bleed=3
        )

        self.assertGreater(len(result.safe_zone_issues), 0)

    def test_generate_validation_report_empty(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        result = ValidationResult([], [], [], [], [], [])
        report = generate_validation_report(result)

        self.assertIn("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", report)

    def test_generate_validation_report_with_errors(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏"""
        result = ValidationResult(
            errors=['–û—à–∏–±–∫–∞ 1', '–û—à–∏–±–∫–∞ 2'],
            warnings=['–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1'],
            infos=['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 1'],
            dpi_issues=[],
            color_issues=[],
            safe_zone_issues=[]
        )

        report = generate_validation_report(result)

        self.assertIn("üö® –û–®–ò–ë–ö–ò:", report)
        self.assertIn("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:", report)
        self.assertIn("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:", report)


if __name__ == '__main__':
    unittest.main()